trigger:
  branches:
    include:
      - main

pool:
  vmImage: 'ubuntu-latest'

variables:
- group: pythonrest-cli

jobs:
- job: CheckPypiVersionBeforePublishing
  displayName: Version Check to publish or not
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self
  - script: |
      # Ensure we have full commit history in the CI environment
      git fetch --all --unshallow
      
      # Find the last non-merge commit before the merge commit (PR source commit)
      last_commit_message=$(git log -1 --pretty=%s $(git rev-list --no-merges -n 1 HEAD))

      if [[ $last_commit_message =~ version\ ?[0-9]+\.[0-9]+\.[0-9]+ ]]; then
        extracted_version="${BASH_REMATCH[0]//version/}"
        echo "Extracted version: $extracted_version"
      else
        echo "Error: The commit message does not contain a valid version format (versionX.X.X)."
        echo "Last commit message: $last_commit_message"
        exit 1
      fi

      sed -i "s/version='[0-9]\+\.[0-9]\+\.[0-9]\+'$/version='$extracted_version'/" ./setup.py
      sed -i "s/pythonrest_version = \"[0-9]\+\.[0-9]\+\.[0-9]\+\"/pythonrest_version = \"$extracted_version\"/" ./pythonrest.py
      
      echo "Updated setup.py and pythonrest.py version to $extracted_version"
      
      grep "version=" ./setup.py
      grep "pythonrest_version" ./pythonrest.py
  - script: |
      latest_version=$(curl -s https://pypi.org/pypi/$(pypi_app_name)/json | jq -r '.info.version' 2>/dev/null)
      echo "Latest version on PyPI: $latest_version"

      local_version=$(python3 setup.py --version)
      echo "Local version in setup.py: $local_version"

      if [ "$latest_version" != "$local_version" ]; then
        echo "Versions are different. Uploading to PyPI."
        pip3 install twine
        python3 setup.py sdist
        python3 -m twine upload dist/* --username __token__ --password $(pip_api_key)
      else
        echo "Versions are the same. Skipping PyPI upload."
      fi

# - job: CheckChocoCLIVersion
#   displayName: 'Check Choco CLI version'
#   pool:
#     vmImage: 'ubuntu-latest'
#   variables:
#     NEEDS_MANUAL_APPROVAL: $[eq(variables['choco_cli_version'], variables['nuspecVersion'])]
#   steps:
#   - bash: |
#       source .env

#       nuspecVersion=$(grep -m 1 '<version>' $(app_name).nuspec | sed -n 's/.*<version>\(.*\)<\/version>.*/\1/p')
#       cliVersion="$CLI_VERSION"

#       if [ "$cliVersion" != "$nuspecVersion" ]; then
#           echo "Value for variable choco_cli_version = '$CLI_VERSION' does not match the one in .nuspec file: nuspec_version."
#           exit 1
#       fi

#       echo "The versions match. Proceeding to Manual Approval..."
#     displayName: 'Verify Choco CLI Version'

# - job: manual_approval
#   dependsOn: CheckChocoCLIVersion
#   displayName: Manual Approval
#   pool: server
#   steps:
#   - task: ManualValidation@0
#     timeoutInMinutes: 1440
#     inputs:
#       notifyUsers: ${{ parameters.USERS_EMAILS_TO_NOTIFY }}
#       instructions: "Are you sure you want to update the CLI version? A new package will be generated and will be sent to Chocolatey's approval process."
#       onTimeout: "reject"

# - job: PublishPackageToChocolatey
#   dependsOn: manual_approval
#   displayName: 'Publish Package to Chocolatey'
#   pool:
#     vmImage: 'windows-latest'
#   steps: 
#   - powershell: |
#       pip install pyinstaller
#       pyinstaller $(app_name).spec

#       $sha256Hash = Get-FileHash -Path "./dist/$(app_name).exe" -Algorithm SHA256 | Select-Object -ExpandProperty Hash
#       $md5Hash = Get-FileHash "./dist/$(app_name).exe" -Algorithm MD5 | Select-Object -ExpandProperty Hash

#       $verificationPath = "./tools/VERIFICATION.txt"
#       (Get-Content -Path $verificationPath) -replace 'MD5: .+', "MD5: $md5Hash" -replace 'SHA-256: .+', "SHA-256: $sha256Hash" | Set-Content -Path $verificationPath

#       choco pack
#       choco push $(app_name).$(choco_cli_version).nupkg -s https://chocolatey.org/ --api-key $(choco_api_key)
#     displayName: 'Continue After Manual Approval'
